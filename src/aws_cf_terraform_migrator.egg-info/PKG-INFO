Metadata-Version: 2.4
Name: aws-cf-terraform-migrator
Version: 1.0.0
Summary: Convert AWS CloudFormation stacks to Terraform modules with zero downtime, comprehensive resource discovery, and no hardcoded values
Home-page: https://github.com/aws-cf-terraform-migrator/aws-cf-terraform-migrator
Author: AWS CF Terraform Migrator Team
Author-email: support@aws-cf-terraform-migrator.com
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: Intended Audience :: System Administrators
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Topic :: System :: Systems Administration
Classifier: Topic :: Software Development :: Code Generators
Classifier: Topic :: Utilities
Requires-Python: >=3.8
Description-Content-Type: text/markdown
Requires-Dist: boto3>=1.40.0
Requires-Dist: botocore>=1.40.0
Requires-Dist: pyyaml>=6.0
Requires-Dist: jinja2>=3.1.0
Requires-Dist: click>=8.0.0
Requires-Dist: colorama>=0.4.6
Requires-Dist: tabulate>=0.9.0
Requires-Dist: jsonschema>=4.0.0
Requires-Dist: cfn-flip>=1.3.0
Requires-Dist: python-hcl2>=4.3.0
Dynamic: author
Dynamic: author-email
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: home-page
Dynamic: requires-dist
Dynamic: requires-python
Dynamic: summary

# AWS CloudFormation to Terraform Migrator

A comprehensive, production-ready tool for migrating AWS CloudFormation stacks to Terraform modules with **zero downtime**, **no hardcoded values**, and **comprehensive resource discovery**.

## 🚀 Key Features

✅ **Zero Downtime Migration** - Import existing resources without recreation  
✅ **No Hardcoded Values** - All configuration properly parameterized in variables  
✅ **Comprehensive Discovery** - Finds both CloudFormation and independent resources  
✅ **Preserve Resource Names** - Maintains existing AWS resource names exactly  
✅ **Flexible Organization** - Multiple module organization strategies  
✅ **Production Ready** - Robust error handling and enterprise-grade features  
✅ **Easy CLI** - Simple commands with clear, helpful output  
✅ **Read-Only Operation** - Never modifies or deletes AWS resources  

## 🎯 What Makes This Tool Different

Unlike existing tools like `cf2tf`, this migrator provides:

- **Complete Infrastructure Discovery**: Finds resources not managed by CloudFormation
- **Zero Downtime Imports**: Import existing resources without service interruption  
- **No Hardcoded Values**: Everything is properly parameterized through variables
- **Comprehensive Module Organization**: Multiple strategies for clean, maintainable code
- **Production-Grade Quality**: Enterprise-ready with extensive testing and documentation

## 📦 Installation

```bash
# Install from source
git clone <repository>
cd aws-cf-terraform-migrator
pip install -r requirements.txt
pip install -e .

# Verify installation
aws-cf-tf-migrate --version
# or
cfmigrate --version
```

## 🚀 Quick Start

### One-Command Migration

```bash
# Complete migration in one command
aws-cf-tf-migrate convert-all \
  --regions us-east-1,us-west-2 \
  --output ./terraform

# Or use the short command
cfmigrate convert-all \
  --regions us-east-1,us-west-2 \
  --output ./terraform
```

### Step-by-Step Process

```bash
# 1. Discover resources
cfmigrate discover --regions us-east-1 --output discovery.json

# 2. Convert to Terraform
cfmigrate convert --input discovery.json --output ./terraform

# 3. Import existing resources
cd terraform
terraform init
chmod +x import_resources.sh
./import_resources.sh

# 4. Verify (should show no changes)
terraform plan
```

## 🎯 Core Features

### Comprehensive Resource Discovery
- **CloudFormation Stacks**: Discovers all stacks across multiple regions
- **Independent Resources**: Finds resources not managed by CloudFormation
- **15+ AWS Services**: EC2, S3, RDS, Lambda, IAM, VPC, and more
- **Parallel Processing**: Optimized for large environments

### Zero Downtime Migration
- **Import Existing Resources**: No resource recreation required
- **Service Continuity**: Maintain availability during migration
- **State Management**: Proper Terraform state initialization
- **Rollback Capability**: Safe migration with rollback options

### No Hardcoded Values
- **Complete Parameterization**: All values exposed as variables
- **Flexible Configuration**: Easy customization for different environments
- **Variable Validation**: Built-in validation for configuration correctness
- **Environment Separation**: Clean separation between dev/staging/prod

### Intelligent Module Organization

**Service-Based (Default)**
```
terraform/
├── modules/
│   ├── networking/     # VPCs, subnets, route tables
│   ├── compute/        # EC2, Auto Scaling, Launch templates
│   ├── storage/        # S3, EBS, EFS
│   ├── database/       # RDS, DynamoDB, ElastiCache
│   └── security/       # IAM, Security Groups, KMS
```

**Stack-Based**
```
terraform/
├── modules/
│   ├── web_app_stack/      # All resources from web-app stack
│   ├── database_stack/     # All resources from database stack
│   └── networking_stack/   # All resources from networking stack
```

**Hybrid (Recommended)**
- Combines strategies based on stack size and complexity
- Large stacks subdivided by service
- Small stacks remain as single modules
- Shared resources grouped into common modules

## 📋 Usage Examples

### Basic Usage

```bash
# Discover and convert all resources
cfmigrate convert-all --regions us-east-1 --output ./terraform

# With specific organization strategy
cfmigrate convert-all \
  --regions us-east-1,us-west-2 \
  --output ./terraform \
  --strategy service_based \
  --module-prefix mycompany

# Filter specific stacks
cfmigrate convert-all \
  --regions us-east-1 \
  --stack-filter "prod-*" \
  --output ./terraform
```

### Advanced Usage

```bash
# Multi-region enterprise migration
cfmigrate convert-all \
  --regions us-east-1,us-west-2,eu-west-1 \
  --strategy hybrid \
  --module-prefix enterprise \
  --output ./terraform \
  --verbose

# With configuration file
cfmigrate convert-all --config migration-config.yaml

# Dry run to see what would be done
cfmigrate convert-all \
  --regions us-east-1 \
  --output ./terraform \
  --dry-run
```

### Configuration File Example

```yaml
# migration-config.yaml
discovery:
  regions:
    - us-east-1
    - us-west-2
  max_workers: 15
  services_to_scan:
    - ec2
    - s3
    - rds
    - lambda

conversion:
  preserve_original_names: true
  terraform_version: ">=1.0"

modules:
  organization_strategy: "hybrid"
  module_prefix: "mycompany"
  include_readme: true

output:
  output_directory: "./terraform_output"
  generate_documentation: true
```

## 🔧 Generated Structure

The tool generates a complete, production-ready Terraform structure:

```
terraform/
├── main.tf                    # Root module orchestration
├── variables.tf               # Root variables (no defaults)
├── outputs.tf                 # Root outputs
├── versions.tf                # Provider versions
├── terraform.tfvars.example  # Example configuration
├── import_resources.sh        # Import script
├── GETTING_STARTED.md         # Usage guide
├── .gitignore                # Git ignore rules
└── modules/
    ├── networking/
    │   ├── main.tf           # Resources (no hardcoded values)
    │   ├── variables.tf      # All configurable parameters
    │   ├── outputs.tf        # Comprehensive outputs
    │   ├── versions.tf       # Provider requirements
    │   └── README.md         # Module documentation
    ├── compute/
    │   └── ... (same structure)
    └── database/
        └── ... (same structure)
```

## 🎯 Key Principles

### No Hardcoded Values
```hcl
# ❌ Bad (hardcoded)
resource "aws_instance" "web" {
  ami           = "ami-12345"
  instance_type = "t3.micro"
  subnet_id     = "subnet-67890"
}

# ✅ Good (parameterized)
resource "aws_instance" "web" {
  ami           = var.web_instance_ami
  instance_type = var.web_instance_type
  subnet_id     = var.web_subnet_id
  
  tags = merge(var.tags, {
    Name = "${var.name_prefix}-${var.environment}-web"
  })
}
```

### Preserve Resource Names
```hcl
# Original AWS resource: "prod-web-server-01"
# Generated Terraform maintains the exact name
resource "aws_instance" "prod_web_server_01" {
  # ... configuration
  tags = {
    Name = "prod-web-server-01"  # Exact original name preserved
  }
}
```

## 📥 Import Process

The tool generates comprehensive import scripts:

```bash
#!/bin/bash
# Generated import script with error handling

set -e
echo "🚀 Starting Terraform import process..."

# Create state backup
terraform state pull > terraform.tfstate.backup.$(date +%Y%m%d_%H%M%S)

# Import resources with progress tracking
echo "📥 Importing VPC resources..."
terraform import module.networking.aws_vpc.main vpc-12345
terraform import module.networking.aws_subnet.public_1 subnet-67890

echo "📥 Importing compute resources..."
terraform import module.compute.aws_instance.web_server i-1234567890abcdef0

echo "✅ Import completed successfully!"
echo "Run 'terraform plan' to verify imports."
```

## 🔍 Supported Resources

### Fully Supported (50+ Resource Types)
- **Compute**: EC2, Lambda, ECS, Auto Scaling
- **Networking**: VPC, Subnets, Load Balancers, Route53
- **Storage**: S3, EBS, EFS
- **Database**: RDS, DynamoDB, ElastiCache
- **Security**: IAM, Security Groups, KMS
- **Monitoring**: CloudWatch, X-Ray

### Resource Discovery Coverage
- **15+ AWS Services**: Comprehensive coverage
- **Independent Resources**: Resources not in CloudFormation
- **Relationship Mapping**: Dependency analysis

## 🛠️ CLI Commands

```bash
# Main commands
cfmigrate convert-all     # 🚀 Complete migration
cfmigrate discover        # 🔍 Discover resources
cfmigrate convert         # 🔄 Convert to Terraform
cfmigrate generate-imports # 📥 Generate import scripts
cfmigrate validate        # ✅ Validate configuration
cfmigrate status          # 📊 Show status

# Get help
cfmigrate --help
cfmigrate convert-all --help
```

## 🔧 Configuration Options

### Organization Strategies
- `service_based`: Group by AWS service (default)
- `stack_based`: Maintain CloudFormation stack structure
- `lifecycle_based`: Group by operational lifecycle
- `hybrid`: Intelligent combination (recommended)

### CLI Options
```bash
--regions           # AWS regions (required)
--output            # Output directory (required)
--strategy          # Organization strategy
--module-prefix     # Prefix for module names
--stack-filter      # Filter stacks by pattern
--profile           # AWS profile
--verbose           # Detailed output
--dry-run           # Preview without changes
```

## 🚨 Safety Features

### Read-Only Operation
- **Never modifies AWS resources**
- **Never deletes anything**
- **Only reads and discovers**
- **Safe to run in production**

### State Management
- **Automatic backups** before imports
- **Rollback capabilities**
- **State validation**
- **Error recovery**

## 📚 Documentation

- **README.md**: Main documentation (this file)
- **MIGRATION_GUIDE.md**: Step-by-step migration guide
- **docs/CONFIGURATION.md**: Configuration options
- **docs/TROUBLESHOOTING.md**: Common issues and solutions
- **docs/USAGE_EXAMPLES.md**: Comprehensive examples
- **GETTING_STARTED.md**: Generated quick start guide

## 🎯 Next Steps After Migration

1. **Review Generated Code**: Check modules and variables
2. **Customize Variables**: Update terraform.tfvars for your environment
3. **Initialize Terraform**: Run `terraform init`
4. **Import Resources**: Execute the generated import script
5. **Validate**: Run `terraform plan` (should show no changes)
6. **Set Up CI/CD**: Integrate with your deployment pipeline

## 🤝 Contributing

We welcome contributions! Please see our contributing guidelines for:
- Code style and standards
- Testing requirements
- Documentation updates
- Feature requests and bug reports

## 📄 License

This project is licensed under the MIT License - see the LICENSE file for details.

## 🆘 Support

- **Documentation**: Comprehensive guides in the `docs/` directory
- **Issues**: Report bugs and request features on GitHub
- **Community**: Join our community discussions

---

**AWS CloudFormation to Terraform Migrator** - Making CloudFormation to Terraform migration safe, reliable, and maintainable.

🌟 **Star this repository** if you find it helpful!

